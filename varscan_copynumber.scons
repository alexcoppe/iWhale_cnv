Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'


print(bcolors.OKGREEN + "Lets go with Varscan2 copynumber" + bcolors.ENDC)

vars = Variables()

vars.Add("VARSCAN_PATH", "The path to VarSca2 jar, default=None", False)
vars.Add("MPILEUP_PATH", "The path to the .mpielup file (default: ~/tumor_normal.mpileup)", "~/tumor_normal.mpileup")
vars.Add("MIN_BASE_QUALITY", "Minimum base quality to count for coverage (default: 20)", "20")
vars.Add("MIN_MAP_QUALITY", "Minimum read mapping quality to count for coverage (default: 20)", "20")
vars.Add("MIN_COVERAGE", "Minimum coverage threshold for copynumber segments (default: 20)", "20")
vars.Add("MIN_SEGMENT_SIZE", "Minimum number of consecutive bases to report a segment (default: 10)", "10")
vars.Add("MAX_SEGMENT_SIZE", "Max size before a new segment is made (default: 100)", "100")
vars.Add("P_VALUE", "P-value threshold for significant copynumber change-point (default: 0.01)", "0.01")
vars.Add("DATA_RATIO", "The normal/tumor input data ratio for copynumber adjustment (default: 1.0)", "1.0")
vars.Add("OUTPUT_FILE_NAME", "The name of the output file", "")
vars.Add("DEBUG", "Show pipeline error messages (default: F)", "F")

env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
Decider('timestamp-newer')    

VARSCAN_PATH             = env["VARSCAN_PATH"]
MPILEUP_PATH             = env["MPILEUP_PATH"]
MIN_BASE_QUALITY         = env["MIN_BASE_QUALITY"]
MIN_MAP_QUALITY          = env["MIN_MAP_QUALITY"]
MIN_COVERAGE             = env["MIN_COVERAGE"]
MIN_SEGMENT_SIZE         = env["MIN_SEGMENT_SIZE"]
P_VALUE                  = env["P_VALUE"]
MAX_SEGMENT_SIZE         = env["MAX_SEGMENT_SIZE"]
DATA_RATIO               = env["DATA_RATIO"]
OUTPUT_FILE_NAME         = env["OUTPUT_FILE_NAME"]
DEBUG                    = env["DEBUG"]



if os.path.isfile(VARSCAN_PATH) == False:
    sys.exit(bcolors.ERROR + "Path to VarSca2 {} is not right".format(VARSCAN_PATH) + bcolors.ENDC + "\n")

if os.path.isfile(MPILEUP_PATH) == False:
    sys.exit(bcolors.ERROR + "File associated to MPILEUP_PATH variable, {}, do not exists".format(MPILEUP_PATH) + bcolors.ENDC + "\n")

try:
    is_min_base_quality_an_int = MIN_BASE_QUALITY
    int(is_min_base_quality_an_int)
except:
    sys.exit(bcolors.ERROR + "Error: MIN_BASE_QUALITY ({}) is not right. Shoud be an int".format(MIN_BASE_QUALITY) + bcolors.ENDC + "\n")

try:
    is_min_map_quality_an_int = MIN_MAP_QUALITY
    int(is_min_map_quality_an_int)
except:
    sys.exit(bcolors.ERROR + "Error: MIN_MAP_QUALITY ({}) is not right. Shoud be an int".format(MIN_MAP_QUALITY) + bcolors.ENDC + "\n")

try:
    min_segment_size = MIN_SEGMENT_SIZE
    int(min_segment_size)
except:
    sys.exit(bcolors.ERROR + "Error: MIN_SEGMENT_SIZE ({}) is not right. Shoud be an int".format(MIN_SEGMENT_SIZE) + bcolors.ENDC + "\n")

try:
    max_segement_size = MAX_SEGMENT_SIZE
    int(max_segement_size)
except:
    sys.exit(bcolors.ERROR + "Error: MAX_SEGMENT_SIZE ({}) is not right. Shoud be an int".format(MAX_SEGMENT_SIZE) + bcolors.ENDC + "\n")

try:
    p_value = P_VALUE
    float(p_value)
except:
    sys.exit(bcolors.ERROR + "Error: P_VALUE ({}) is not right. Shoud be an float".format(P_VALUE) + bcolors.ENDC + "\n")

try:
    data_ratio = DATA_RATIO
    float(data_ratio)
except:
    sys.exit(bcolors.ERROR + "Error: DATA_RATIO ({}) is not right. Shoud be an float".format(DATA_RATIO) + bcolors.ENDC + "\n")

Help(vars.GenerateHelpText(env))

varscan_copynumberCMD = "java -jar ${SOURCES[0]} copynumber ${SOURCES[1]} " + " {} --mpileup 2 --min-base-qual {} --min_map-qual {} --min-coverage {} --min-segment-size {} --max-segment-size {} --p-value {} --data-ratio {}".format(OUTPUT_FILE_NAME, MIN_BASE_QUALITY, MIN_MAP_QUALITY, MIN_COVERAGE, MIN_SEGMENT_SIZE, MAX_SEGMENT_SIZE, P_VALUE, DATA_RATIO)

if DEBUG == "F":
    varscan_copynumberCMD += " 2> /dev/null "

OUTPUT_FILE_NAME = OUTPUT_FILE_NAME + ".copynumber"

env.Command(OUTPUT_FILE_NAME, [VARSCAN_PATH, MPILEUP_PATH], varscan_copynumberCMD)
