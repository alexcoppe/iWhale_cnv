Import('*')

import os
import sys
import os.path
from os import listdir
from os.path import isfile, join


class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'


def build_samtools_mpileup_file_name(tumor, control):
    splitted_tumor = ".".join(tumor.split(".")[:-1])
    splitted_control = ".".join(control.split(".")[:-1])
    name = splitted_tumor + "_" + splitted_control
    return name


def checkTumorControlMatches(txt):
    tumor_control_samples = []
    if os.path.exists(txt):
        with open(txt,'r') as f:
            for line in f:
                tumorSample = line.strip().split(" ")[0]
                controlSample = line.strip().split(" ")[1]
                is_there_tumor_bam = os.path.exists(os.path.join("00_bams", tumorSample))
                is_there_control_bam = os.path.exists(os.path.join("00_bams", controlSample))
                if is_there_tumor_bam == False:
                    exit(bcolors.ERROR + "File {} not found in 00_bams directory".format(tumorSample) + bcolors.ENDC)
                if is_there_control_bam == False:
                    exit(bcolors.ERROR + "File {} not found in 00_bams directory".format(controlSample) + bcolors.ENDC)
                tumor_control_samples.append((tumorSample,controlSample))
    else:
        return "Error: {} file not found".format(txt)

    return tumor_control_samples

try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()
    vars.Add("CPUS", "Number of CPUs to use", '1')
    vars.Add("DEBUG", "Show pipeline error messages", "F")
    vars.Add("INTERVALS_PATH", "One or more genomic intervals over which to operate", "./intervals.bed")
    vars.Add("ANNOTATION_DIR_PATH", "The path for the directory containing all the annotation files needed (default: /annotations)", "/annotations")
    vars.Add("BED_FILE", "The name of the bed file (default: exome_regions_hg38.bed)", "exome_regions_hg38.bed")
    vars.Add("FASTA_GENOME", "Name of genome fasta file (default: GRCh38.fa)", "GRCh38.fa")
    vars.Add("GENOME_FILE_PATH", "The path of the genome fasta (default: ~/annotations_hg38/GRCh38.fa)", "~/annotations_hg38/GRCh38.fa")
    vars.Add("NORMAL_BAM_PATH", "The path to the normal BAM path (default: ./00_bams/c.bam)", "00_bams/c.bam")
    vars.Add("TUMOR_BAM_PATH", "The path to the tumor BAM path (default: ./00_bams/t.bam)", "00_bams/t.bam")
    vars.Add("VARSCAN_PATH", "The path to VarSca2 jar, default=None", False)
    vars.Add("VARSCAN_PATH", "The path to VarSca2 jar, default=None", False)
    vars.Add("MIN_BASE_QUALITY", "Minimum base quality to count for coverage (default: 20)", "20")
    vars.Add("MIN_MAP_QUALITY", "Minimum read mapping quality to count for coverage (default: 20)", "20")
    vars.Add("MIN_COVERAGE", "Minimum coverage threshold for copynumber segments (default: 20)", "20")
    vars.Add("MIN_SEGMENT_SIZE", "Minimum number of consecutive bases to report a segment (default: 10)", "10")
    vars.Add("MAX_SEGMENT_SIZE", "Max size before a new segment is made (default: 100)", "100")
    vars.Add("P_VALUE", "P-value threshold for significant copynumber change-point (default: 0.01)", "0.01")
    vars.Add("DATA_RATIO", "The normal/tumor input data ratio for copynumber adjustment (default: 1.0)", "1.0")

    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    CPUS                         = env["CPUS"]
    DEBUG                        = env["DEBUG"]
    ANNOTATION_DIR_PATH          = env["ANNOTATION_DIR_PATH"]
    BED_FILE                     = env["BED_FILE"]
    FASTA_GENOME                 = env["FASTA_GENOME"]
    GENOME_FILE_PATH             = env["GENOME_FILE_PATH"]
    NORMAL_BAM_PATH              = env["NORMAL_BAM_PATH"]
    TUMOR_BAM_PATH               = env["TUMOR_BAM_PATH"]
    VARSCAN_PATH                 = env["VARSCAN_PATH"]
    MIN_BASE_QUALITY             = env["MIN_BASE_QUALITY"]
    MIN_MAP_QUALITY              = env["MIN_MAP_QUALITY"]
    MIN_COVERAGE                 = env["MIN_COVERAGE"]
    MIN_SEGMENT_SIZE             = env["MIN_SEGMENT_SIZE"]
    MAX_SEGMENT_SIZE             = env["MAX_SEGMENT_SIZE"]
    P_VALUE                      = env["P_VALUE"]
    DATA_RATIO                   = env["DATA_RATIO"]

    try:
        CPUS = int(CPUS)
    except:
        sys.exit(bcolors.ERROR + "Error: CPUS ({}) is not right. Shoud be an int".format(CPUS) + bcolors.ENDC + "\n")
    CPUS = str(CPUS)

    
    bams_dir = "00_bams"
    all_files = [f for f in os.listdir(bams_dir) if os.path.isfile(os.path.join(bams_dir, f))]
    bam_files = [f for f in all_files if f.endswith(".bam")]
    if len(bam_files) == 0:
        sys.exit(bcolors.ERROR + "No .bam file in {} directory".format(vcf_dir) + bcolors.ENDC + "\n")

    bam_pairs =  checkTumorControlMatches("tumor_control_samples.txt")


    ######################## DO THE JOB ######################

    for (bam_tumor,bam_control) in bam_pairs:
        ######## Preparing a genomic intervals list #######

        #print(bcolors.OKGREEN + "01 - Preparing intervals list" + bcolors.ENDC)

        try:
            os.makedirs("01_interval_list")
        except OSError:
            if not os.path.exists("01_interval_list"):
                sys.exit(bcolors.ERROR + "Error creating directory 01_interval_list. Check permissions" + bcolors.ENDC + "\n")

        input_bam_tumor,input_bam_control = ("00_bams/" + bam_tumor, "00_bams/" + bam_control)

        tumor_output_name = bam_control.split(".")[0]
        control_output_name = bam_control.split(".")[1]

        tumor_target = "tumor_"+ tumor_output_name +  ".interval_list"
        control_target = "control" + control_output_name + ".interval_list"

        cmd = "scons -j {}  -f gatk_preprocessintervals.scons OUTPUT_DIR=01_interval_list OUTPUT_NAME={} ANNOTATION_DIR_PATH={} FASTA_GENOME={} BED_FILE={}"

        tumor_cmd = cmd.format(CPUS, tumor_target, ANNOTATION_DIR_PATH, FASTA_GENOME, BED_FILE)

        control_cmd = cmd.format(CPUS, control_target, ANNOTATION_DIR_PATH, FASTA_GENOME, BED_FILE)

        if DEBUG == "F":
            tumor_cmd += " 2> /dev/null "
            control_cmd += " 2> /dev/null"

        sources = [os.path.join(ANNOTATION_DIR_PATH, FASTA_GENOME)]

        env.Command("01_interval_list/" + tumor_target, sources, tumor_cmd)

        env.Command("01_interval_list/" + control_target, sources, control_cmd)


        ######## Preparing a genomic intervals list #######


        ####### Samtools mpileup ##########################


        #print(bcolors.OKGREEN + "03 - Samtools mpileup for VarScan2" + bcolors.ENDC)

        try:
            os.makedirs("03_samtools_mpileup")
        except OSError:
            if not os.path.exists("03_samtools_mpileup"):
                sys.exit(bcolors.ERROR + "Error creating directory 03_samtools_mpileup. Check permissions" + bcolors.ENDC + "\n")

        samtools_mpileup_file_name = build_samtools_mpileup_file_name(bam_tumor, bam_control)
        samtools_mpileup_file_name = samtools_mpileup_file_name + ".mpileup"

        mpileupCMD = "scons -f samtools_mpileup.scons OUTPUT_DIR=03_samtools_mpileup GENOME_FILE_PATH=${SOURCES[0]} TUMOR_BAM_PATH=${SOURCES[1]} NORMAL_BAM_PATH=${SOURCES[1]} " +  "OUTPUT_NAME={}".format(samtools_mpileup_file_name)

        env.Command(["./03_samtools_mpileup/" + samtools_mpileup_file_name], [GENOME_FILE_PATH, TUMOR_BAM_PATH, NORMAL_BAM_PATH], mpileupCMD )


        ####### VarScan2 copynumber ##########################

        try:
            os.makedirs("04_varscan_copynumber")
        except OSError:
            if not os.path.exists("04_varscan_copynumber"):
                sys.exit(bcolors.ERROR + "Error creating directory 04_varscan_copynumber. Check permissions" + bcolors.ENDC + "\n")

        varscan_copynumber_output = "04_varscan_copynumber/" +  samtools_mpileup_file_name.split(".")[0]

        varscan_copynumberCMD = "scons -f varscan_copynumber.scons VARSCAN_PATH=${SOURCES[0]} " + " MPILEUP_PATH=03_samtools_mpileup/{} MIN_BASE_QUALITY={} OUTPUT_FILE_NAME={} MIN_MAP_QUALITY={} MIN_COVERAGE={} MIN_SEGMENT_SIZE={} MAX_SEGMENT_SIZE={} P_VALUE={} DATA_RATIO={} ".format(samtools_mpileup_file_name, MIN_BASE_QUALITY, varscan_copynumber_output, MIN_MAP_QUALITY, MIN_COVERAGE, MIN_SEGMENT_SIZE, MAX_SEGMENT_SIZE, P_VALUE, DATA_RATIO)

        TARGET = varscan_copynumber_output + ".copynumber"

        env.Command([TARGET], [VARSCAN_PATH], varscan_copynumberCMD )
