'''

samtools mpileup

NEEDED DATA AND PARAMETERS:
    - GENOME_FILE_PATH: the path to the  human genome fasta (example: ~/annotations_hg38/GRCh38.fa)
    - OUTPUT_DIR: the directory for output (example: ./)
    - OUTPUT_NAME: the output file name (default: tumor_normal.mpileup )
    - DEBUG: show pipeline error messages (default: F)
    - NORMAL_BAM_PATH: the path to the normal BAM path (default: ./00_bams/c.bam)
    - TUMOR_BAM_PATH: the path to the tumor BAM path (default: ./00_bams/t.bam


NEEDED SOFTWARE:
    samtools: http://www.htslib.org

DESCRIPTION:

    Produces "pileup" textual format from an alignment


EXAMPLE COMMAND:
    scons -j 10  -f samtools_mpileup.scons OUTPUT_DIR=03_mpileup GENOME_FILE_PATH=~/annotations_hg38/GRCh38.fa TUMOR_BAM_PATH=00_bams/tumor.bam NORMAL_BAM_PATH=00_bams/normal.bam OUTPUT_NAME=normal_tumor.mpileup
    

SITE:
    http://www.htslib.org/doc/samtools-mpileup.html

CITATION:
    Li H, Handsaker B, Wysoker A, Fennell T, Ruan J, Homer N, Marth G, Abecasis G, Durbin R, and 1000 Genome Project Data Processing Subgroup, The Sequence alignment/map (SAM) format and SAMtools, Bioinformatics (2009) 25(16) 2078-9


'''

Import('*')

import os
import sys
import os.path

class bcolors:
    OKGREEN = '\033[92m'
    ERROR   = '\033[91m'
    ENDC    = '\033[0m'


try:
    env = env
except NameError as error:
    print(bcolors.ERROR + str(error) + bcolors.ENDC)
    print(bcolors.OKGREEN + "Lets go with the DEFAULT variables" + bcolors.ENDC)

    vars = Variables()

    
    vars.Add("GENOME_FILE_PATH", "The path of the genome fasta (default: ~/annotations_hg38/GRCh38.fa)", "~/annotations_hg38/GRCh38.fa")
    vars.Add("OUTPUT_DIR", "Directory for output (default: ./)", "./")
    vars.Add("OUTPUT_NAME", "Output file name (default: tumor_normal.mpileup )", "tumor_normal.mpileup")
    vars.Add("DEBUG", "Show pipeline error messages (default: F)", "F")
    vars.Add("NORMAL_BAM_PATH", "The path to the normal BAM path (default: ./00_bams/c.bam)", "00_bams/c.bam")
    vars.Add("TUMOR_BAM_PATH", "The path to the tumor BAM path (default: ./00_bams/t.bam)", "00_bams/t.bam")


    env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
    Decider('timestamp-newer')    

    GENOME_FILE_PATH             = env["GENOME_FILE_PATH"]
    DEBUG                        = env["DEBUG"]
    OUTPUT_DIR                   = env["OUTPUT_DIR"]
    OUTPUT_NAME                  = env["OUTPUT_NAME"]
    NORMAL_BAM_PATH              = env["NORMAL_BAM_PATH"]
    TUMOR_BAM_PATH               = env["TUMOR_BAM_PATH"]

    try: 
        os.makedirs(OUTPUT_DIR)
    except OSError:
        if not os.path.exists(OUTPUT_DIR):
            sys.exit(bcolors.ERROR + "Error creating directory OUTPUT_DIR: {}. Check permissions".format(OUTPUT_DIR) + bcolors.ENDC + "\n")

    if not os.path.exists(GENOME_FILE_PATH):
            sys.exit(bcolors.ERROR + "File associated to GENOME_FILE_PATH, {}, do not exists".format(GENOME_FILE_PATH) + bcolors.ENDC + "\n")

    if not os.path.exists(TUMOR_BAM_PATH):
            sys.exit(bcolors.ERROR + "File associated to TUMOR_BAM_PATH, {}, do not exists".format(TUMOR_BAM_PATH) + bcolors.ENDC + "\n")

    if not os.path.exists(NORMAL_BAM_PATH):
            sys.exit(bcolors.ERROR + "File associated to NORMAL_BAM_PATH, {}, do not exists".format(NORMAL_BAM_PATH) + bcolors.ENDC + "\n")

    # Example:
    # samtools_mpileupCMD = "samtools mpileup -q 1 -f ~/annotations_hg38/GRCh38.fa 00_bams/normal.bam 00_bams/tumor.bam > 00_bams/normal_tumor.mpileup"
    samtools_mpileupCMD = "samtools mpileup -q 1 -f ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} > ${TARGET}"

    TARGET = os.path.join(OUTPUT_DIR, OUTPUT_NAME)
